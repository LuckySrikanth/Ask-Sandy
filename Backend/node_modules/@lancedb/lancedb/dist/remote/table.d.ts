import { Table as ArrowTable } from "apache-arrow";
import { Data, IntoVector } from "../arrow";
import { IndexStatistics } from "..";
import { IndexOptions } from "../indices";
import { MergeInsertBuilder } from "../merge";
import { VectorQuery } from "../query";
import { AddDataOptions, Table, UpdateOptions } from "../table";
import { IntoSql } from "../util";
import { RestfulLanceDBClient } from "./client";
export declare class RemoteTable extends Table {
    #private;
    get name(): string;
    constructor(client: RestfulLanceDBClient, tableName: string, dbName: string);
    isOpen(): boolean;
    close(): void;
    display(): string;
    schema(): Promise<import("apache-arrow").Schema>;
    add(data: Data, options?: Partial<AddDataOptions>): Promise<void>;
    update(optsOrUpdates: (Map<string, string> | Record<string, string>) | ({
        values: Map<string, IntoSql> | Record<string, IntoSql>;
    } & Partial<UpdateOptions>) | ({
        valuesSql: Map<string, string> | Record<string, string>;
    } & Partial<UpdateOptions>), options?: Partial<UpdateOptions>): Promise<void>;
    countRows(filter?: unknown): Promise<number>;
    delete(predicate: unknown): Promise<void>;
    createIndex(column: string, options?: Partial<IndexOptions>): Promise<void>;
    query(): import("..").Query;
    search(_query: string | IntoVector): VectorQuery;
    vectorSearch(_vector: unknown): import("..").VectorQuery;
    addColumns(_newColumnTransforms: unknown): Promise<void>;
    alterColumns(_columnAlterations: unknown): Promise<void>;
    dropColumns(_columnNames: unknown): Promise<void>;
    version(): Promise<number>;
    checkout(_version: unknown): Promise<void>;
    checkoutLatest(): Promise<void>;
    restore(): Promise<void>;
    optimize(_options?: unknown): Promise<import("../native").OptimizeStats>;
    listIndices(): Promise<import("../native").IndexConfig[]>;
    toArrow(): Promise<ArrowTable>;
    mergeInsert(_on: string | string[]): MergeInsertBuilder;
    indexStats(_name: string): Promise<IndexStatistics | undefined>;
}
