import { Data, SchemaLike } from "../arrow";
import { Connection, CreateTableOptions, OpenTableOptions, TableNamesOptions } from "../connection";
import { Table } from "../table";
export interface RemoteConnectionOptions {
    apiKey?: string;
    region?: string;
    hostOverride?: string;
    timeout?: number;
}
export declare class RemoteConnection extends Connection {
    #private;
    constructor(url: string, { apiKey, region, hostOverride, timeout }: RemoteConnectionOptions);
    isOpen(): boolean;
    close(): void;
    display(): string;
    tableNames(options?: Partial<TableNamesOptions>): Promise<string[]>;
    openTable(name: string, _options?: Partial<OpenTableOptions> | undefined): Promise<Table>;
    createTable(nameOrOptions: string | ({
        name: string;
        data: Data;
    } & Partial<CreateTableOptions>), data?: Data, options?: Partial<CreateTableOptions> | undefined): Promise<Table>;
    createEmptyTable(name: string, schema: SchemaLike, options?: Partial<CreateTableOptions> | undefined): Promise<Table>;
    dropTable(name: string): Promise<void>;
}
