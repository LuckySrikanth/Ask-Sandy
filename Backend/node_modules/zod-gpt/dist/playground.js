"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const llm_api_1 = require("llm-api");
const zod_1 = require("zod");
const src_1 = require("./src");
(async function go() {
    let client;
    if (process.env.OPENAI_KEY) {
        client = new llm_api_1.OpenAIChatApi({
            apiKey: process.env.OPENAI_KEY ?? 'YOUR_client_KEY',
        }, { contextSize: 4096 });
    }
    else if (process.env.ANTHROPIC_KEY) {
        client = new llm_api_1.AnthropicChatApi({
            apiKey: process.env.ANTHROPIC_KEY ?? 'YOUR_client_KEY',
        }, { stream: true, temperature: 0 });
    }
    else if (process.env.AWS_BEDROCK_ACCESS_KEY &&
        process.env.AWS_BEDROCK_SECRET_KEY) {
        client = new llm_api_1.AnthropicBedrockChatApi({
            accessKeyId: process.env.AWS_BEDROCK_ACCESS_KEY ?? 'YOUR_access_key',
            secretAccessKey: process.env.AWS_BEDROCK_SECRET_KEY ?? 'YOUR_secret_key',
        }, { stream: true, temperature: 0, model: 'anthropic.claude-v2' });
    }
    else if (process.env.GROQ_KEY) {
        client = new llm_api_1.GroqChatApi({
            apiKey: process.env.GROQ_KEY ?? 'YOUR_client_KEY',
        }, { stream: false, temperature: 0 });
    }
    if (!client) {
        throw new Error('Please pass in either an OpenAI or Anthropic environment variable');
    }
    const resStartup = await (0, src_1.completion)(client, 'Generate a startup idea', {
        schema: zod_1.z.object({
            name: zod_1.z.string().describe('The name of the startup'),
            description: zod_1.z.string().describe('What does this startup do?'),
        }),
    });
    console.info('Response 1: ', resStartup.data);
    const resHello = await (0, src_1.completion)(client, 'Hello');
    console.info('Response 2:', resHello.data);
    const resComplexSchema = await (0, src_1.completion)(client, 'Generate a step by step plan to run a hackathon', {
        schema: zod_1.z.object({
            plan: zod_1.z.array(zod_1.z.object({
                reason: zod_1.z.string().describe('Name the reasoning for this step'),
                name: zod_1.z.string().describe('Step name'),
                task: zod_1.z
                    .string()
                    .describe('What is the task to be done for this step?')
                    .optional(),
            })),
        }),
    });
    console.info('Response 3:', resComplexSchema.data);
    const resBulletPoints = await (0, src_1.completion)(client, 'Generate a list of interesting areas of exploration about the renaissance', {
        schema: zod_1.z.object({
            topics: zod_1.z
                .array(zod_1.z.object({
                title: zod_1.z.string().describe('Title of the idea'),
                reason: zod_1.z.string().describe('Why you choose this idea'),
                peopleInvolved: zod_1.z
                    .string()
                    .describe("If there any known figures that's related to this idea")
                    .optional(),
            }))
                .min(10)
                .max(20),
        }),
    });
    console.info('Response 4:', resBulletPoints.data);
    const resBuletPoints2 = await resBulletPoints.respond('Generate 10 more');
    console.info('Response 4R:', resBuletPoints2.data);
    const resMessageHistory = await (0, src_1.completion)(client, 'What did I mention in my first message to you?', {
        messageHistory: [
            { role: 'user', content: 'Tell me about large langauge models' },
            { role: 'assistant', content: 'ok' },
        ],
    });
    console.info('Response 5:', resMessageHistory.data);
    const meaning = await (0, src_1.completion)(client, 'What is the meaning of life?')
        .then((res) => res.respond('why'))
        .then((res) => res.respond('why'))
        .then((res) => res.respond('why'))
        .then((res) => res.respond('why'))
        .then((res) => res.respond('why'));
    console.info('The meaning of life after 5 whys is: ', meaning.content);
})();
