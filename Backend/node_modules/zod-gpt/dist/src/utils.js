"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zodToJsonSchema = exports.parseUnsafeJson = exports.sleep = exports.debug = void 0;
const debug_1 = require("debug");
const jsonic_1 = __importDefault(require("jsonic"));
const jsonrepair_1 = require("jsonrepair");
const lodash_1 = require("lodash");
const zod_to_json_schema_1 = __importDefault(require("zod-to-json-schema"));
const error = (0, debug_1.debug)('zod-gpt:error');
const log = (0, debug_1.debug)('zod-gpt:log');
log.log = console.log.bind(console);
exports.debug = {
    error,
    log,
    write: (t) => process.env.DEBUG &&
        'zod-gpt:log'.match(process.env.DEBUG) &&
        process.stdout.write(t),
};
function sleep(delay) {
    return new Promise((resolve) => {
        setTimeout(resolve, delay);
    });
}
exports.sleep = sleep;
const extractJSONObjectResponse = (res) => res.match(/\{(.|\n)*\}/g)?.[0];
const extractJSONArrayResponse = (res) => res.match(/\[(.|\n)*\]/g)?.[0];
const extractJSONMarkdownResponse = (res) => {
    const match = res.match(/```json((.|\n)*?)```/g)?.[0];
    return match ? match.replace(/```json|```/g, '').trim() : undefined;
};
function parseUnsafeJson(json) {
    try {
        const potientialJson = extractJSONMarkdownResponse(json);
        const potientialArray = extractJSONArrayResponse(potientialJson ?? json);
        const potientialObject = extractJSONObjectResponse(potientialJson ?? json);
        const extracted = (potientialArray?.length ?? 0) > (potientialObject?.length ?? 0)
            ? potientialArray
            : potientialObject;
        if (extracted) {
            return (0, jsonic_1.default)((0, jsonrepair_1.jsonrepair)(extracted));
        }
        else {
            return undefined;
        }
    }
    catch (e) {
        exports.debug.error('⚠️ error parsing unsafe json: ', json, e);
        return undefined;
    }
}
exports.parseUnsafeJson = parseUnsafeJson;
function zodToJsonSchema(schema) {
    return (0, lodash_1.omit)((0, zod_to_json_schema_1.default)(schema, { $refStrategy: 'none' }), '$ref', '$schema', 'default', 'definitions', 'description', 'markdownDescription');
}
exports.zodToJsonSchema = zodToJsonSchema;
